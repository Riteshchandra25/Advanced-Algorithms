#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>

using namespace std;

// Node structure for the Huffman Tree
struct Node {
    char ch;
    int freq;
    Node* left;
    Node* right;

    Node(char c, int f) : ch(c), freq(f), left(nullptr), right(nullptr) {}
};

// Comparator for the priority queue
struct compare {
    bool operator()(Node* l, Node* r) {
        return l->freq > r->freq;
    }
};

// Function to print the Huffman Codes in preorder traversal
void printCodes(Node* root, string str, unordered_map<char, string> &huffmanCode) {
    if (!root)
        return;

    // If this is a leaf node, it contains one of the input characters
    if (!root->left && !root->right) {
        huffmanCode[root->ch] = str;
        cout << str << " ";
    }

    printCodes(root->left, str + "0", huffmanCode);
    printCodes(root->right, str + "1", huffmanCode);
}

int main() {
    string S = "abcdef";
    vector<int> f = {5, 9, 12, 13, 16, 45};

    int n = S.length();

    // Create a priority queue to store live nodes of Huffman tree
    priority_queue<Node*, vector<Node*>, compare> pq;

    // Create a leaf node for each character and add it to the priority queue
    for (int i = 0; i < n; ++i) {
        pq.push(new Node(S[i], f[i]));
    }

    // Iterate while the size of the queue doesn't become 1
    while (pq.size() != 1) {
        // Remove the two nodes of highest priority (lowest frequency) from the queue
        Node* left = pq.top();
        pq.pop();
        Node* right = pq.top();
        pq.pop();

        // Create a new internal node with these two nodes as children and with frequency equal to the sum of the two nodes' frequencies
        Node* top = new Node('$', left->freq + right->freq);
        top->left = left;
        top->right = right;

        // Add the new node to the priority queue
        pq.push(top);
    }

    // The remaining node is the root node and the tree is complete
    Node* root = pq.top();

    // Print Huffman Codes using preorder traversal
    unordered_map<char, string> huffmanCode;
    printCodes(root, "", huffmanCode);

    return 0;
}
