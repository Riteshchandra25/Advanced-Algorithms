#include <iostream>
#include <vector>
using namespace std;

// Struct to store non-zero elements
struct Element {
    int row;
    int col;
    int value;
};

// Class to handle Sparse Matrix operations
class SparseMatrix {
private:
    int totalRows;
    int totalCols;
    int nonZeroCount;
    vector<Element> elements;

public:
    // Constructor
    SparseMatrix(int rows, int cols) {
        totalRows = rows;
        totalCols = cols;
        nonZeroCount = 0;
    }

    // Function to input matrix and store non-zero elements
    void inputMatrix() {
        int value;
        cout << "Enter the matrix elements:\n";
        for (int i = 0; i < totalRows; ++i) {
            for (int j = 0; j < totalCols; ++j) {
                cin >> value;
                if (value != 0) {
                    elements.push_back({i, j, value});
                    ++nonZeroCount;
                }
            }
        }
    }

    // Function to display matrix details and non-zero elements
    void display() {
        cout << "Number of rows: " << totalRows << endl;
        cout << "Number of columns: " << totalCols << endl;
        cout << "Number of non-zero elements: " << nonZeroCount << endl;
        cout << "Row Column Value\n";
        for (const auto& elem : elements) {
            cout << elem.row << " " << elem.col << " " << elem.value << endl;
        }
    }
};

int main() {
    int rows, cols;
    cout << "Enter number of rows: ";
    cin >> rows;
    cout << "Enter number of columns: ";
    cin >> cols;

    SparseMatrix sparseMatrix(rows, cols);
    sparseMatrix.inputMatrix();
    sparseMatrix.display();

    return 0;
}
