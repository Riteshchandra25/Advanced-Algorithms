#include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;

vector<int> twoSum(vector<int>& nums, int target) {
    unordered_map<int, int> hash_map;
    for (int i = 0; i < nums.size(); ++i) {
        int complement = target - nums[i];
        if (hash_map.find(complement) != hash_map.end()) {
            return {hash_map[complement], i};
        }
        hash_map[nums[i]] = i;
    }
    return {};
}

int main() {
    vector<int> nums = {2, 7, 11, 15};
    int target = 9;
    vector<int> result = twoSum(nums, target);
    cout << "Output: [" << result[0] << ", " << result[1] << "]" << endl;

    nums = {3, 2, 4};
    target = 6;
    result = twoSum(nums, target);
    cout << "Output: [" << result[0] << ", " << result[1] << "]" << endl;

    nums = {3, 3};
    target = 6;
    result = twoSum(nums, target);
    cout << "Output: [" << result[0] << ", " << result[1] << "]" << endl;

    return 0;
}
